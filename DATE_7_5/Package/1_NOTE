패키지(P219)
    모듈을 모아놓은 단위
    관련된 여러 개의 모듈을 계층적인 디렉터리로 분류해서 저장하고 관리한다
    닷(.)을 이용하여 관리할 수 있다
    오른쪽 예제에서 Game,Sound,Image,Level은 디렉토리이고 .py 파일이 파이썬 모듈이다
    __init__.py는 패키지를 인식시켜주는 역할을 수행->특정 디렉토리가 패키지로 인식되기 위해 필요한 파일

파이썬 프로그래밍 기초:클래스(P_221)
    파이썬 클래스
        새로운 이름 공간을 지ㅜ언하는 단위: 데이터의 설계도
        데이터와 데이터를 변경하는 함수(메서드)를 같은 공간 내에 작성
        클래스를 정의하는 것은 새로운 자료형을 정의하는 것이고, 인스턴스는 이 자료형의 객체를 생성하는 것이다.
        클래스와 인스턴스는 각자의 이름공간을 가지게 되며 유기적인 관계로 연결
     Class.py

    파이썬 클래스:용어 정리(P_222)
    용어                            설명
    클래스(Class)                     class 문으로 정의하며, 멤버와 메서드를 가지는 객체
    클랙스 객체                       어떤 클래스를 구체적으로 가리킬 때 사용
    인스턴스                          클래스를 호출하여 만들어지는 객체
    인스턴스 객체                     인스턴스화 된 객체
    멤버                              클래스가 갖는 변수
    메서드                            클래스 내에 정의된 함수
    속성                              멤버 + 메서드
    상위클래스                        기반 클래스. 어떤 클래스의 상위에 있으며 여러 속성을 상속해준다
    하위클래스                        파생 클래스. 상위 클래스로부터 여러 속성을 상속 받는다.

    파이썬 클래스:클래스 이용의 장점(P_223)
        프로그램의 규모가 커졌을 때 의미 있는 집합체 단위로 프로그램을 정리할 수 있다
        설계도(Class)가 잇으므로 인스턴스를 양산할 수 있다.

    파이썬 클래스:클래스의 생성과 메서드의 정의
    Point.py

    파이썬 클래스: 인스턴스 객체 생성과 메서드 호출(P_225)
        Bound Instance Method 호출
     Paint.py 수정
        Unbound Instance Method 호출(참고)
     Paint.py 수정

     파이썬 클래스:정적 메서드(static method)와 클래스 메서드(class method)
        인스턴스 객체의 멤버에 접근할 필요가 없는 메서드
        첫 번째 인자로 인스턴스 객체 참조값을 받지 않는 클래스 내에 정의된 메서드
        Class 메서드의 첫 번째 인자는 클래스 객체 참조를 위한 객체 참조값
        @staticmethod, @classmethod 데코레이터로 손쉽게 구현 가능
      Point.py 수정

      파이썬 클래스: 클래스 멤버와 인스턴스 멤버
        종류                이름공간                공유 범위
        클래스 멤버         클래스 이름 공간 내     모든 인스턴스 객체들에 공유
        인스턴스 멤버       인스턴스 이름 공간 내   개별 인스턴스 객체에서만 참조
      Point.py 수정

      파이썬 클래스: 클래스 멤버와 인스턴스 멤버 접근(P_229)
        인스턴스 객체에서 참조하는 멤버의 객체를 찾는 순서는 아래와 같다
            인스턴스 멤버
            인스턴스 멤버가 없다면 클래스 멤버를 찾음

      파이썬 클래스: 생성자와 소멸자
        생성자: 클래스가 인스턴스화 될 때 실행되는 내용. 초기화
            __init__ 메서드 내에 작성
        소멸자: 클래스 인스턴스가 제거될 때 실행되는 내용.
            __del__ 메서드 내에 작성
      Point.py 수정

      파이썬 클래스:__str__ 메서드(P_231)
        객체를 문자열로 반환하는 함수

      파이썬 클래스: __repr__메서드(P_232)
        __str__과 비슷하지만 "문자열로 객체를 다시 생성할 수 있기 위해" 사용
        Eval을 수행하면 다시 그 해당 객체가 생성될 수 있어야 한다.

       파이썬 클래스: __str__ vs __repr__(P_233)
                      str                           repr
       구분           비공식적 문자열 출력          공식적 문자열 출력
       목적           사용자가 보기 쉽게            문자열로 객체를 다시 생성할 수 있도록
       대상           사용자(End User)              개발자(Developer)

       파이썬 클래스: 연산자 재정의(Operator Overloading)(P_234)
        연산자에 대해 클래스에 새로운 동작을 정의하는 것
        파이썬의 클래스는 새로운 데이터 형을 정의하는 것이므로 그에 상응하는 연산자의 재정의가 필요할 수 있다
        연산자가 정의되어 있지 않으면 TypeError가 발생
        파이썬에서는 사용하는 거의 모든 연산에 대해 새롭게 정의할 수 있다.
            수치 연산자 오버로딩
            역이항 연산자 오버로딩
            확장 산술 연산자 오버로딩
            비교 연산자 오버로딩

        파이썬 클래스: 수치 연산자 오버로딩(P_235,P_236)
            연산자                 수치 연산자 메서드                역이행 연산자 메서드
            +                       __add__                          __radd__
            -                       __sub__                          __rsub__
            *                       __mul__                          __rmul__
            /                       __truediv__
            //                      __floormod__                     __rfloormod__
            %                       __mod__                          __rmod__
            divmod()                __divmod__                       __rdivmod__
            pow(),**                __pwd__                          __rpow__
            <<                      __lshift__                       __rlshift__
            >>                      __rshift__                       __rrshift__
            &                       __and__                          __rand__
            ^                       __xor__                          __rxor__
            |                       __or__                           __ror__

            연산자                  확장 산술 연산자 오버로딩
            +=                      __iadd__
            -=                      __isub__
            *=                      __imul__
            //=                     __ifloormod__
            /=                      __idiv__
            %=                      __imod__
            **=                     __ipow__
            <<=                     __ilshift__
            >>=                     __irshift__
            &=                      __iand__
            ^=                      __ixor__
            |=                      __ior__

            연산자                 비교 연산자 오버로딩
            <                      __lt__
            <=                     __le__
            >                      __gt__
            >=                     __ge__
            ==                     __eq__
            !=                     __ne__